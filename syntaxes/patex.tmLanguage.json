{
  "scopeName": "source.patex",
  "name": "Patex",
  "patterns": [
    {
      "include": "#prefixed-regex-strings"
    },
    {
      "include": "#prefixed-strings"
    },
    {
      "include": "#bare-quoted-regex"
    },
    {
      "include": "#envelope-keywords"
    },
    {
      "include": "#syntactic-placeholders"
    },
    {
      "include": "#envelope-annotations"
    },
    {
      "include": "#envelope-operators"
    },
    {
      "include": "#bare-regex"
    },
    {
      "include": "#parenthesized-with-regex"
    },
    {
      "include": "source.dcbor-envelope"
    }
  ],
  "repository": {
    "envelope-keywords": {
      "patterns": [
        {
          "comment": "Patex keywords",
          "match": "\\b(?:leaf|bool|bstr|cbor|date|known|number|tagged|text|assert|assertpred|assertobj|digest|node|obj|obscured|elided|encrypted|compressed|pred|subj|wrapped|unwrap|search)\\b",
          "name": "keyword.other.patex"
        }
      ]
    },
    "syntactic-placeholders": {
      "patterns": [
        {
          "comment": "Syntactic placeholders in angle brackets",
          "match": "<[a-zA-Z0-9_/:-]+>",
          "name": "keyword.placeholder.patex"
        }
      ]
    },
    "envelope-annotations": {
      "patterns": [
        {
          "comment": "Named captures (annotations) starting with @",
          "match": "(@)([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {"name": "punctuation.definition.annotation.patex"},
            "2": {"name": "variable.annotation.patex"}
          }
        }
      ]
    },
    "envelope-operators": {
      "patterns": [
        {
          "comment": "Comparison operators with numbers",
          "match": "(?<![a-zA-Z0-9])(>=|<=|>|<)(?=\\s*[0-9])",
          "name": "keyword.operator.patex"
        },
        {
          "comment": "General envelope pattern operators",
          "match": "[&|!*?+]|->",
          "name": "keyword.operator.patex"
        }
      ]
    },
    "prefixed-regex-strings": {
      "patterns": [
        {
          "comment": "Prefixed single-quoted strings containing regex patterns with keyword prefixes",
          "match": "\\b(leaf|bool|bstr|cbor|date|known|number|tagged|text|assert|assertpred|assertobj|digest|node|obj|obscured|elided|encrypted|compressed|pred|subj|wrapped|unwrap|search)(')(/[^/\\\\\\n]*(?:\\\\.[^/\\\\\\n]*)*/[gimsuxy]*)(')",
          "captures": {
            "1": {"name": "keyword.other.patex"},
            "2": {"name": "punctuation.definition.string.begin.patex"},
            "3": {"name": "string.regexp.patex"},
            "4": {"name": "punctuation.definition.string.end.patex"}
          }
        },
        {
          "comment": "Prefixed single-quoted strings containing regex patterns with non-keyword prefixes",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(')(/[^/\\\\\\n]*(?:\\\\.[^/\\\\\\n]*)*/[gimsuxy]*)(')",
          "captures": {
            "1": {"name": "storage.type.string.patex"},
            "2": {"name": "punctuation.definition.string.begin.patex"},
            "3": {"name": "string.regexp.patex"},
            "4": {"name": "punctuation.definition.string.end.patex"}
          }
        }
      ]
    },
    "prefixed-strings": {
      "patterns": [
        {
          "comment": "Prefixed single-quoted strings with keyword prefixes",
          "match": "\\b(leaf|bool|bstr|cbor|date|known|number|tagged|text|assert|assertpred|assertobj|digest|node|obj|obscured|elided|encrypted|compressed|pred|subj|wrapped|unwrap|search)(')([^'\\\\]*(?:\\\\.[^'\\\\]*)*)(')",
          "captures": {
            "1": {"name": "keyword.other.patex"},
            "2": {"name": "punctuation.definition.string.begin.patex"},
            "3": {"name": "string.quoted.prefixed.patex"},
            "4": {"name": "punctuation.definition.string.end.patex"}
          }
        },
        {
          "comment": "Prefixed single-quoted strings with non-keyword prefixes",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(')([^'\\\\]*(?:\\\\.[^'\\\\]*)*)(')",
          "captures": {
            "1": {"name": "storage.type.string.patex"},
            "2": {"name": "punctuation.definition.string.begin.patex"},
            "3": {"name": "string.quoted.prefixed.patex"},
            "4": {"name": "punctuation.definition.string.end.patex"}
          }
        }
      ]
    },
    "bare-regex": {
      "patterns": [
        {
          "comment": "Bare regex patterns",
          "match": "/([^/\\\\\\n]|\\\\.)+/[gimsuxy]*",
          "name": "string.regexp.patex"
        }
      ]
    },
    "bare-quoted-regex": {
      "patterns": [
        {
          "comment": "Bare single-quoted strings containing regex patterns",
          "match": "(')(/[^/\\\\\\n]*(?:\\\\.[^/\\\\\\n]*)*/[gimsuxy]*)(')",
          "captures": {
            "1": {"name": "punctuation.definition.string.begin.patex"},
            "2": {"name": "string.regexp.patex"},
            "3": {"name": "punctuation.definition.string.end.patex"}
          }
        }
      ]
    },
    "parenthesized-with-regex": {
      "patterns": [
        {
          "comment": "Parenthesized expressions with regex support",
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {"name": "punctuation.parenthesis.begin.patex"}
          },
          "endCaptures": {
            "0": {"name": "punctuation.parenthesis.end.patex"}
          },
          "patterns": [
            {
              "comment": "Regex patterns with optional flags inside parentheses",
              "match": "/([^/\\\\\\n]|\\\\.)+/[gimsuxy]*",
              "name": "string.regexp.patex"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  }
}
