{
  "scopeName": "source.dcbor-envelope",
  "patterns": [
    {
      "name": "comment.block.inline.json",
      "match": "(?<!\\()\\/[^\\n]*?\\/(?![a-zA-Z])"
    },
    {
      "name": "comment.line.number-sign.json",
      "match": "#.*$"
    },
    {
      "name": "punctuation.square.brackets.json",
      "match": "\\[|\\]"
    },
    {
      "name": "punctuation.curly.braces.json",
      "match": "\\{|\\}"
    },
    {
      "name": "punctuation.parenthesis.json",
      "match": "\\(|\\)"
    },
    {
      "name": "punctuation.separator.json",
      "match": "[,;:]"
    },
    {
      "name": "string.quoted.prefixed.json",
      "match": "[a-zA-Z]?[a-zA-Z0-9]+'(?:[^'\\\\]|\\\\.)*'"
    },
    {
      "name": "string.quoted.prefixed.multiline.json",
      "begin": "[a-zA-Z]?[a-zA-Z0-9]+'",
      "end": "'",
      "patterns": [
        {
          "name": "comment.block.inline.json",
          "match": "\\/[^\\n]*?\\/"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape.json"
        }
      ]
    },
    {
      "name": "string.quoted.double.json",
      "match": "\"(?:[^\"\\\\]|\\\\.)*\""
    },
    {
      "name": "string.quoted.single.json",
      "match": "'(?:[^'\\\\]|\\\\.)*'"
    },
    {
      "name": "constant.numeric.date.json",
      "match": "\\b\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}Z?)?\\b"
    },
    {
      "name": "constant.numeric.hex.json",
      "match": "\\b0[xX]([0-9a-fA-F]+)(\\.[0-9a-fA-F]+)?[pP][+-]?[0-9]+\\b"
    },
    {
      "name": "constant.numeric.hex.json",
      "match": "\\b0[xX][0-9a-fA-F]+\\b"
    },
    {
      "name": "constant.numeric.binary.json",
      "match": "\\b0[bB][01]+\\b"
    },
    {
      "name": "constant.numeric.octal.json",
      "match": "\\b0[oO][0-7]+\\b"
    },
    {
      "name": "constant.numeric.json",
      "match": "\\b[0-9]*[a-fA-F][0-9a-fA-F]*\\b"
    },
    {
      "name": "constant.numeric.special.json",
      "match": "-Infinity|Infinity|NaN"
    },
    {
      "name": "constant.numeric.json",
      "match": "-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?"
    },
    {
      "name": "constant.language.json",
      "match": "\\b(?:true|false|null|undefined|simple)\\b"
    },
    {
      "name": "keyword.other.literal.json",
      "match": "\\b(?:ELIDED|ENCRYPTED|COMPRESSED)\\b"
    },
    {
      "name": "constant.other.ur.json",
      "match": "(?i)ur:[a-z][a-z0-9-]*/[a-z]+"
    },
    {
      "name": "identifier.bareword.json",
      "match": "\\b[A-Za-z_][A-Za-z0-9_-]*\\b"
    }
  ]
}
